@using System.Configuration
@using Omnae.Model.Models
@using Omnae.Controllers
@using Omnae.Common
@using StringExtensions = Omnae.Common.Extensions.StringExtensions

@model IEnumerable<Omnae.BusinessLayer.Models.TaskViewModel>

<style>
    div#alerts-grid {
        display: none;
    }
</style>

<div class="card-block">
    <div class="col-lg-12">
        <h4 class="col-md-10">Alerts</h4>
        <span class="col-md-2  small-button" style="float:right; width:140px;">
            <a href="#" class="col-xs-2 switcher small-button alerts-listview green-text"><i class="fa fa-list-ul fa-2x" aria-hidden="true"></i></a>
            <a href="#" class="col-xs-2 switcher active small-button alerts-gridview pink-text"><i class="fa fa-th fa-2x" aria-hidden="true"></i></a>
        </span>
        <br />
        <hr class="gradient" />
    </div>
    <div id="alerts-grid" class="card-block">
        @if (Model != null && Model.Any())
        {
            int i = 0;
            int maxIcons = Convert.ToInt16(ConfigurationManager.AppSettings["MaxIconsInGrid"]);
            foreach (var tdvm in @Model)
            {
                var td = tdvm.TaskData;
                var order = tdvm.Order;
                if (td.StateId < (int)States.ProductionStarted ||
                    td.StateId == (int)States.BidReview && td.isEnterprise == true ||
                    td.StateId == (int)States.NCRCustomerCorrectivePartsAccepted && td.isEnterprise == true)
                {
                    var stateIconMapping = Utils.ConstructStateIconMapping();

                    <div class="col-md-4">
                        <div class="card">

                            <!--Card Header-->

                            <div class="card-header primary-background-color white-text grid-min-height padding-off">
                                <div class="col-md-6 padding-off">
                                    <span class="margin-off my-h5">
                                        @td.Product.PartNumber @td.Product.Name
                                        @if (td.IsRiskBuild == true)
                                        {
                                            <span class="yellow-text" style="font-size:1.2em;" title="Risk Build">*</span>
                                        }
                                    </span>
                                </div>
                                <span class="col-md-4 white-text padding-off">
                                    @tdvm.EnumName
                                </span>
                                <span class="col-md-2 my-icon padding-off">
                                    @Html.Raw(Utils.GetStateIconUrl(stateIconMapping, (States)td.StateId))
                                </span>

                            </div>
                            <div class="wrapper">
                                <div class="card-image card-image-min-height">

                                    <!--Card image-->

                                    @{
                                        var ext = Path.GetExtension(td.Product.AvatarUri).ToUpper();
                                    }
                                    @if (td.Product.AvatarUri != null && (ext == ".GIF" || ext == ".JPEG" || ext == ".JPG" || ext == ".PNG"))
                                    {
                                        <div class="view overlay hm-white-slight card-image-min-height">
                                            <img src=@td.Product.AvatarUri class="img-fluid center-block card-image-height" title="@td.Product.Name">
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="view overlay hm-white-slight z-depth-1 card-image-min-height">
                                            <h1 class="text-lg-center brown-text top-padding-80 card-image-height">@td.Product.PartNumber.PadLeft(8, '0')</h1>
                                            <a>
                                                <div class="mask  waves-effect waves-light"></div>
                                            </a>
                                        </div>
                                    }
                                </div>

                                <div class="card-block my-card-text card-image-min-height">

                                    <!--Card text-->

                                    <dl class="productInfo dl-horizontal">
                                        @if (order != null)
                                        {
                                            <dt>Order Date</dt>
                                            <dd>@order.OrderDate.ToString("yyyy-MM-dd")</dd>

                                            if (@order.DesireShippingDate != null)
                                            {
                                                <dt>Desired Delivery Date</dt>
                                                <dd>@order.DesireShippingDate.Value.ToString("yyyy-MM-dd")</dd>
                                            }
                                            if (@order.EarliestShippingDate != null)
                                            {
                                                <dt>Earliest Ship Date</dt>
                                                <dd>@order.EarliestShippingDate.Value.ToString("yyyy-MM-dd")</dd>
                                            }
                                            <dt>
                                                Order Qty
                                            </dt>
                                            <dd>
                                                @order.Quantity
                                            </dd>
                                            if (order.EstimateCompletionDate != null)
                                            {
                                                <dt>
                                                    Est. Completion Date
                                                </dt>
                                                <dd>
                                                    @order.EstimateCompletionDate.Value.ToString("yyyy-MM-dd")
                                                </dd>
                                            }
                                            if (order.CustomerPONumber != null)
                                            {
                                                <dt>
                                                    PO #
                                                </dt>
                                                <dd class="green-text">
                                                    @order.CustomerPONumber
                                                </dd>
                                            }
                                        }

                                        @Html.Partial("_NextStates", tdvm)

                                        @if (td.StateId == (int)States.BackFromRFQ && td.RevisingReason != null)
                                        {
                                            <dt>Revising Reason:</dt>
                                            <dd>
                                                @td.RevisingReason
                                            </dd>
                                        }
                                    </dl>

                                    @if (td.StateId == (int)States.BackFromRFQ ||
                                        td.StateId == (int)States.BidReview ||
                                        td.StateId == (int)States.OrderInitiated ||
                                        td.StateId == (int)States.ReOrderInitiated ||
                                        td.StateId == (int)States.ProofingComplete ||
                                        td.StateId == (int)States.BidReview && td.isEnterprise == true ||
                                        td.StateId == (int)States.NCRCustomerCorrectivePartsAccepted && td.isEnterprise == true ||
                                        td.StateId == (int)States.SampleComplete)
                                    {
                                        <button type="button" class="btn accent-background-color btn-small pull-right btn-in-card" onclick="ShowModalView(@td.TaskId);" data-toggle="modal" data-target="@string.Format("#Modal{0}", td.TaskId)">
                                            Action Needed
                                        </button>
                                    }
                                    else if (td.StateId == (int)States.QuoteAccepted)
                                    {
                                        <a class="btn accent-background-color btn-small pull-right btn-in-card" href="~/Products/PlaceOrder/@td.TaskId">PLACE ORDER</a>
                                    }

                                </div>
                            </div>

                            @*@Html.Partial("_ModalActionView", @td)*@
                            <div class="modal" id="@($"Modal{td.TaskId}")" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"></div>


                            <div class="card-data primary-background-color">
                                @*<span data-id1="@td.ProductId" class="col-xs-12 pull-left font-weight-bold part-number">@td.Product.PartNumber.ToString().PadLeft(8, '0')</span>*@

                                @if (td.StateId == (int)States.BackFromRFQ ||
                                    td.StateId == (int)States.BidReview && td.isEnterprise == true ||
                                    td.StateId == (int)States.OrderInitiated ||
                                    td.StateId == (int)States.ReOrderInitiated ||
                                    td.StateId == (int)States.ProofingComplete ||
                                    td.StateId == (int)States.SampleComplete ||
                                    td.StateId == (int)States.NCRCustomerCorrectivePartsAccepted && td.isEnterprise == true ||
                                    td.StateId == (int)States.QuoteAccepted)
                                {
                                    <a class="col-md-2 red-text action-flag padding-off">
                                        <i class="fa fa-flag fa-2x" aria-hidden="true" title="You have new action event to handle for this part!"></i>
                                    </a>
                                }
                                else
                                {
                                    <a class="col-md-2 padding-off">
                                        <i class="fa fa-flag-o fa-2x" aria-hidden="true" title="You have no new action for this part!"></i>
                                    </a>
                                }
                                @if (td.StateId >= (int)States.QuoteAccepted)
                                {
                                    <span class="col-md-4 padding-off"><a href="~/Products/PlaceOrder/@td.TaskId">PLACE ORDER</a></span>
                                }
                                else
                                {
                                    <span class="col-md-4 padding-off"></span>
                                }
                                @*@if (td.StateId >= (int)States.OrderPaid)
                                    {
                                        <span class="col-md-4 padding-off"><a href="@Url.Action("Details", "Orders", new { @id = @order.Id, @taskId = @td.TaskId })">ORDER DETAILS</a></span>
                                    }
                                    else
                                    {
                                        <span class="col-md-4 padding-off"></span>
                                    }*@

                                @if (order != null)
                                {
                                    <a class="col-md-4 white-text padding-off" href="@Url.Action("OrderDetails", "Orders", new { @id = @td.TaskId })">ORDER DETAILS</a>
                                }
                                else
                                {
                                    <a class="col-md-4 white-text padding-off" href="@Url.Action("Details", "Orders", new { @id = @td.TaskId })">DETAILS</a>
                                }

                                @Html.AntiForgeryToken()

                                @if (td.isTagged == true)
                                {
                                    <a class="my-icon my-tag padding-off col-md-2" data-id1="@td.TaskId"><i class="fa fa-tag fa-2x green-text" aria-hidden="true"></i></a>
                                }
                                else
                                {
                                    <a class="my-icon my-tag padding-off col-md-2" data-id1="@td.TaskId"><i class="fa fa-tag fa-2x" aria-hidden="true"></i></a>
                                }
                            </div>

                        </div>
                    </div>

                    i++;
                }
                if (i >= maxIcons)
                {
                    break;
                }
            }

            if (i >= maxIcons)
            {
                <a class="font-weight-bold text-lg-center" href="@Url.Action("RedirectToFullView", "Home", new { @num = 6 })"><h4>More ...</h4></a>
            }
        }
    </div>

    <div id="alerts-list" class="card-block">

        @if (Model != null && Model.Any())
        {
            @Html.Partial("_DashboardRowColumnNames")
            foreach (var tdvm in Model)
            {
                var td = tdvm.TaskData;
                if (td.StateId < (int)States.ProductionStarted && td.StateId != (int)States.PendingRFQ ||
                    td.StateId == (int)States.BidReview && td.isEnterprise == true ||
                    td.StateId == (int)States.NCRCustomerCorrectivePartsAccepted && td.isEnterprise == true)
                {
                    @Html.Partial("_CustomerLandingListView", tdvm)
                }
            }
        }
    </div>
</div>