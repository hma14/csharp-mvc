@model Omnae.Model.Models.Aspnet.SimplifiedUser

@{
    ViewBag.Title = "Edit User";
}

@if (ViewBag.Message != null)
{
<h2>@ViewBag.Message</h2>
}
@if (ViewBag.Error != null)
{
<h3>@ViewBag.Error</h3>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container-fluid top-margin-30">
        <div class="offset-md-2 col-md-8">

            <div class="card">
                <h4 class="card-header">
                    @ViewBag.Title
                    <small class="float-sm-right">@Html.ActionLink("Back to List", "Index", new { @class = "btn btn-light" })</small>
                </h4>
                <div class="card-block">

                    <div class="form-horizontal">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Id)

                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DisplayFor(model => model.Email)
                                @Html.HiddenFor(model => model.Email)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.UserType, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @{
                                        var selectList = Enum.GetValues(typeof(USER_TYPE))
                                            .Cast<USER_TYPE>()
                                            .Where(e => e != USER_TYPE.Admin && e != USER_TYPE.Unknown)
                                            .Select(e => new SelectListItem
                                            {
                                                Value = ((int)e).ToString(),
                                                Text = e.ToString()
                                            });
                                }
                                @Html.DropDownListFor(model => model.UserType, selectList, htmlAttributes: new { @class = "form-control" })

                                @Html.ValidationMessageFor(model => model.UserType, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        @*<div class="form-group">
                                @Html.LabelFor(model => model.CompanyId, "CompanyId", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("CompanyId", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })
                                </div>
                            </div>*@

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-default" />
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
