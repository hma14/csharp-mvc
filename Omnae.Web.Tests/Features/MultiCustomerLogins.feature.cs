// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Omnae.Web.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MultiCustomerLoginsFeature : Xunit.IClassFixture<MultiCustomerLoginsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "MultiCustomerLogins.feature"
#line hidden
        
        public MultiCustomerLoginsFeature(MultiCustomerLoginsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Multi Customer Logins", "    As a customer\r\n    I want to manage all my corporation logins information.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="A new Customer must have a Admintration user - Self-Serve")]
        [Xunit.TraitAttribute("FeatureTitle", "Multi Customer Logins")]
        [Xunit.TraitAttribute("Description", "A new Customer must have a Admintration user - Self-Serve")]
        public virtual void ANewCustomerMustHaveAAdmintrationUser_Self_Serve()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new Customer must have a Admintration user - Self-Serve", null, ((string[])(null)));
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
   testRunner.Given("A new Customer is self creating a user in Omnae System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("a new user is created for this Customer and the company data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
    testRunner.Then("this user should be a \"CustomerAdmin\" acount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 9
    testRunner.Then("this user should be associate to this Customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A customer with existing user account or email domain should not be able to creat" +
            "e duplicates")]
        [Xunit.TraitAttribute("FeatureTitle", "Multi Customer Logins")]
        [Xunit.TraitAttribute("Description", "A customer with existing user account or email domain should not be able to creat" +
            "e duplicates")]
        public virtual void ACustomerWithExistingUserAccountOrEmailDomainShouldNotBeAbleToCreateDuplicates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A customer with existing user account or email domain should not be able to creat" +
                    "e duplicates", null, ((string[])(null)));
#line 11
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 12
   testRunner.Given("A customer with existing user account associated with email address or email doma" +
                    "in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
    testRunner.When("this customer attempts to create a new account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
    testRunner.Then("The system will reject the new account creation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
     testRunner.And("Customer will be notified that the account already exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
     testRunner.And("associated account admin will be notified of the atempted account creation, given" +
                    " option to approve user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A customer with an existing company account should not be able to create duplicat" +
            "es")]
        [Xunit.TraitAttribute("FeatureTitle", "Multi Customer Logins")]
        [Xunit.TraitAttribute("Description", "A customer with an existing company account should not be able to create duplicat" +
            "es")]
        public virtual void ACustomerWithAnExistingCompanyAccountShouldNotBeAbleToCreateDuplicates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A customer with an existing company account should not be able to create duplicat" +
                    "es", null, ((string[])(null)));
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 19
   testRunner.Given("A customer with existing Company account associated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("this customer attempts to create a new account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
    testRunner.Then("The system will reject the new account creation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MultiCustomerLoginsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MultiCustomerLoginsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
